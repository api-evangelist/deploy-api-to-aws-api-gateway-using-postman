
{"id":"e81e0e06-6dde-4f84-a13a-077706847aa6","name":"Deploy API To AWS API Gateway","description":"This is a collection for deploying an API from Postman to AWS API Gateway. It was distilled down from a larger API life cycle collection I am building but I wanted to pull out and let it stand on its own. Currently it is a five step deployment process.\n\n1. Pull API - Loads up the specific version of a Postman API into the environment for processing.\n2. Create Table - Actually creates an AWS DynamoDB table derived from the name of the API used.\n3. Prepare - Takes the OpenAPI and generates AWS API Gateway integration extensions that define backend.\n4. Publish - Takes the new OpenAPI with integration exensions and publishes to AWS API Gateway.\n5. Deploy - Actually deploys the API to a specific development or production stage in the gateway.\n\nAll of this could easily be distilled down into a single Postman request, but I want to pause and make sure that is what I need. It has already been distilled down from multiple API calls to Postman, AWS DynamoDB, and AWS API Gatway. So, I am just pausing to make sure of the workflow I want for deploying an API to a development or production environment.\n\nThis collection depends on this environment to authenticate with the Postman API, AWS DynamodDB API, and AWS API Gateway API, as well as to store data used in the deployment process. You can import this environment into your Postman, enter your keys and tokens, and it should work as long as your AWS IAM is configured properly.\n\n```{\n  \"id\": \"005b52a2-c6b5-4412-bb71-50cd35442cf9\",\n  \"name\": \"Deploy API To AWS API Gateway\",\n  \"values\": [\n    {\n      \"key\": \"postman_api_key\",\n      \"value\": \"PMAK-5dd7747e143d540036e741f5-3f52ef91f45fc8170d5cb9bbd1cd035912\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"postman_base_url\",\n      \"value\": \"https:\/\/api.getpostman.com\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"postman_echo_url\",\n      \"value\": \"https:\/\/postman-echo.com\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"postman_api_description\",\n      \"value\": null,\n      \"enabled\": true\n    },\n    {\n      \"key\": \"postman_api_id\",\n      \"value\": \"\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"postman_api_name\",\n      \"value\": \"\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"postman_api_version_id\",\n      \"value\": \"\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"postman_api_version_name\",\n      \"value\": \"Draft\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"postman_schema_id\",\n      \"value\": \"\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"accessKey\",\n      \"value\": \"[your AWS access key]\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"secretKey\",\n      \"value\": \"[your AWS secret key]\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_api_gateway_control_plane_region\",\n      \"value\": \"us-east-1\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_api_gateway_base_url\",\n      \"value\": \"https:\/\/apigateway.us-east-1.amazonaws.com\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_api_gateway_control_plane_service\",\n      \"value\": \"apigateway\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_api_gateway_api_id\",\n      \"value\": \"\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_api_gateway_resource_id\",\n      \"value\": \"\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_api_gateway_deployment_id\",\n      \"value\": \"\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_api_gateway_usage_plan_id\",\n      \"value\": \"\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_api_gateway_stage_name\",\n      \"value\": \"development\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_api_gateway_stage_id\",\n      \"value\": \"\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_api_gateway_invoke_url\",\n      \"value\": \"\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_dynamodb_base_url\",\n      \"value\": \"https:\/\/dynamodb.us-east-1.amazonaws.com\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_dynamodb_region\",\n      \"value\": \"us-east-1\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_dynamodb_service\",\n      \"value\": \"dynamodb\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_dynamodb_table_name\",\n      \"value\": \"\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_iam_role\",\n      \"value\": \"[your aws iam role]\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"aws_dynamodb_table_id\",\n      \"value\": \"\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"openapi_current\",\n      \"value\": \"\",\n      \"enabled\": true\n    },\n    {\n      \"key\": \"openapi_build\",\n      \"value\": \"\",\n      \"enabled\": true\n    }\n  ],\n  \"_postman_variable_scope\": \"environment\",\n  \"_postman_exported_at\": \"2020-01-02T23:35:37.157Z\",\n  \"_postman_exported_using\": \"Postman\/7.14.0\"\n}\n```","auth":null,"events":[{"listen":"prerequest","script":{"id":"75ee03e6-8322-4173-b385-337785ef8262","type":"text\/javascript","exec":[""]}},{"listen":"test","script":{"id":"b2caed03-91d9-4309-850c-e785fe0e91fa","type":"text\/javascript","exec":[""]}}],"variables":[],"order":["2be86e68-03f0-472f-b008-cfbc0abe8459","ad9e03f4-6762-409a-b8e6-ffc948e3cc1e","dbfd6b1d-ddff-47d8-808f-7c01a005a342","1470823f-006b-4e67-bd25-428d34491ca2","61780cad-152d-4011-9db8-7e47a327fbaf","762f981e-90d1-461a-8a7c-ab4ed87b4194","f8d22fb8-4487-49ce-913c-057f309e04f4","ff23f096-664c-4882-948c-fbdbd3ea79f6","8ce6e540-3d14-41d5-a70a-8ff4603e23d9","1b07a419-d1f1-44e2-b48c-cfa85c51061d"],"folders_order":[],"protocolProfileBehavior":[],"folders":[],"requests":[{"id":"1470823f-006b-4e67-bd25-428d34491ca2","name":"4. Publish API To Gateway ( (AWS API Gateway))","url":"{{aws_api_gateway_base_url}}\/restapis?failonwarnings=false&mode=import&failonwarning=false&basepath=ignore","description":"This takes the OpenAPI stored in the environment, complete with integration bindings, and then publishes to AWS API Gateway using the API. Which publishes all paths and models defined in the OpenAPI, and wires up the integration with DynamoDB using the integration extension published as part of the OpenAPI definition.","data":[],"dataOptions":null,"dataMode":"raw","headerData":[],"method":"POST","pathVariableData":[],"queryParams":[{"key":"failonwarnings","value":"false","equals":true,"description":"A query parameter to indicate whether to rollback the API creation (true) or not (false) when a warning is encountered. The default value is false.","enabled":true},{"key":"mode","value":"import","equals":true,"description":"","enabled":true},{"key":"failonwarning","value":"false","equals":true,"description":"","enabled":true},{"key":"basepath","value":"ignore","equals":true,"description":"","enabled":true}],"auth":{"type":"awsv4","awsv4":[{"key":"service","value":"{{aws_api_gateway_control_plane_service}}","type":"string"},{"key":"secretKey","value":"{{secretKey}}","type":"string"},{"key":"accessKey","value":"{{accessKey}}","type":"string"},{"key":"region","value":"{{aws_api_gateway_control_plane_region}}","type":"string"}]},"events":[{"listen":"test","script":{"id":"0e2f6e54-7204-4191-ae7a-eaba6410352f","exec":["const jsonData = pm.response.json();","var api_id = jsonData.id;","pm.environment.set(\"aws_api_gateway_api_id\",api_id);"],"type":"text\/javascript"}}],"folder":null,"preRequestScript":null,"tests":"const jsonData = pm.response.json();\nvar api_id = jsonData.id;\npm.environment.set(\"aws_api_gateway_api_id\",api_id);","currentHelper":"awsSigV4","helperAttributes":{"service":"{{aws_api_gateway_control_plane_service}}","secretKey":"{{secretKey}}","accessKey":"{{accessKey}}","region":"{{aws_api_gateway_control_plane_region}}"},"collectionId":"e81e0e06-6dde-4f84-a13a-077706847aa6","rawModeData":"{{openapi_build}}","headers":"","pathVariables":[]},{"id":"1b07a419-d1f1-44e2-b48c-cfa85c51061d","name":"10. Add entry to API.","url":"{{aws_api_gateway_invoke_url}}\/{{aws_dynamodb_table_name}}","description":"This actually adds an entry to the API we have deployed, adding a record to the backend database.","data":[],"dataOptions":null,"dataMode":"raw","headerData":[{"key":"x-api-key","value":"{{aws_api_gateway_key}}","description":"","type":"text","enabled":true},{"key":"Content-Type","value":"application\/json","description":"","type":"text","enabled":true}],"method":"POST","pathVariableData":[],"queryParams":[],"auth":{"type":"noauth","noauth":[]},"events":null,"folder":null,"currentHelper":null,"helperAttributes":null,"collectionId":"e81e0e06-6dde-4f84-a13a-077706847aa6","rawModeData":"{\n  \"given_name\": \"My New Asteroid\",\n  \"description\": \"This is my asteroids description -- cool!\",\n  \"nasa_url\": \"http:\/\/example.com\/asteroid\/\",\n  \"image_url\": \"http:\/\/example.com\/image.jpg\"\n}","headers":"x-api-key: {{aws_api_gateway_key}}\nContent-Type: application\/json\n","pathVariables":[]},{"id":"2be86e68-03f0-472f-b008-cfbc0abe8459","name":"1. Pull API (Postman)","url":"https:\/\/api.getpostman.com\/apis\/?workspace_name=API LIfe Cycle&api_name=Asteroids&api_version=Draft","description":"The pulls an API from Postman based upon name, then finds the underlying version, and OpenAPI schema--then loads that OpenAPI into the environment so it can be augmented with integration extensions that will define the backend integration between AWS DynamoDB and AWS API Gateway. Keeping the OpenAPI in the environment to minimize round trips to the Postman API.","data":null,"dataOptions":null,"dataMode":null,"headerData":[{"key":"x-api-key","type":"text","value":"{{postman_api_key}}"}],"method":"GET","pathVariableData":[],"queryParams":[{"key":"workspace_name","value":"API LIfe Cycle","equals":true,"description":"","enabled":true},{"key":"api_name","value":"Asteroids","equals":true,"description":"","enabled":true},{"key":"api_version","value":"Draft","equals":true,"description":"","enabled":true}],"auth":null,"events":[{"listen":"prerequest","script":{"id":"621ede08-3001-490d-bbf9-7ddab5d1e50a","exec":[""],"type":"text\/javascript"}},{"listen":"test","script":{"id":"de866ea0-9fc8-45f0-9959-080d4dd8eaa6","exec":["var response = pm.response.json();","","var postman_api_key = pm.environment.get(\"postman_api_key\");","","var apis = response.apis;","","\/\/ parse the query string","const paramsString = request.url.split('?')[1];","const eachParamArray = paramsString.split('&');","let params = {};","eachParamArray.forEach((param) => {","    const key = param.split('=')[0];","    const value = param.split('=')[1];","    Object.assign(params, {[key]: value});","});","","\/\/ set incoming values","var api_request_name = params.api_name;","var api_request_version = params.api_version;","if(api_request_version===''){","    api_request_version = 'Draft';","}","","pm.environment.set(\"postman_api_name\", api_request_name);","","\/\/ loop through each api","for (aIndex = 0; aIndex < apis.length; aIndex++) {","    ","    var api_id = apis[aIndex].id;","    var api_name = apis[aIndex].name;","    var api_summary = apis[aIndex].summary;","    var api_description = apis[aIndex].description;","    var api_createdAt = apis[aIndex].createdAt;","    var api_updatedAt = apis[aIndex].updatedAt;","    var api_createdBy = apis[aIndex].createdBy;","    var api_updatedBy = apis[aIndex].updatedBy;","    ","    \/\/ if our incoming api matches then this is our API","    if(api_request_name==api_name){","        ","        console.log(\"API ID: \" + api_id);","        console.log(\"API Name: \" + api_name);","        ","        var postman_api_url = 'https:\/\/api.getpostman.com\/apis\/' + api_id + '\/versions';","        ","        const apiVersionsRequest = {","          url: postman_api_url,","          method: 'GET',","          header: 'x-api-key:' + postman_api_key","        };","        ","        pm.sendRequest(apiVersionsRequest, function (err, res) {","            if (err) {","                console.log(err);","            } else {  ","                ","                var api_version_response = res.json();","                ","                var versions = api_version_response.versions;","                ","                \/\/console.log(versions);","                ","                for (vIndex = 0; vIndex < versions.length; vIndex++) {","                    ","                    version_id = versions[vIndex].id;","                    version_name = versions[vIndex].name;","                    api_id = versions[vIndex].api;","                    version_createdAt = versions[vIndex].createdAt;","                    version_updatedAt = versions[vIndex].updatedAt;","                    version_createdBy = versions[vIndex].createdBy;","                    version_updatedBy = versions[vIndex].updatedBy;","                    version_lastRevision = versions[vIndex].lastRevision;","        ","                    pm.environment.set(\"postman_api_id\", api_id);","                    pm.environment.set(\"postman_api_version_id\", version_id);","                    pm.environment.set(\"postman_api_version_name\", version_name);         ","","                    if(api_request_version===version_name){","                        ","                        \/\/console.log(version_id + ' - ' + version_name);","                        ","                        var postman_versions_url = 'https:\/\/api.getpostman.com\/apis\/' + api_id + '\/versions\/' + version_id;","                        ","                        const apiVersionRequest = {","                          url: postman_versions_url,","                          method: 'GET',","                          header: 'x-api-key:' + postman_api_key","                        };","                        ","                        pm.sendRequest(apiVersionRequest, function (err, res) {","                            if (err) {","                                console.log(err);","                            } else {  ","                                ","                                var api_version_detail_response = res.json();   ","                                ","                                var schema_id = api_version_detail_response.version.schema[0];","                                pm.environment.set(\"postman_schema_id\", schema_id);","                                ","                                \/\/console.log(\"schema_id: \" + schema_id);","                                        ","                                var postman_schema_url = 'https:\/\/api.getpostman.com\/apis\/' + api_id + '\/versions\/' + version_id + '\/schemas\/' + schema_id;","                                ","                                const apiSchemaRequest = {","                                  url: postman_schema_url,","                                  method: 'GET',","                                  header: 'x-api-key:' + postman_api_key","                                };","                                ","                                pm.sendRequest(apiSchemaRequest, function (err, res) {","                                    if (err) {","                                        console.log(err);","                                    } else {  ","                                        ","                                    var api_schema_response = res.json();  ","                                    \/\/console.log(api_schema_response);","                                    ","                                    var schema_type = api_schema_response.schema.type;","                                    var schema_createdBy = api_schema_response.schema.createdBy;","                                    var schema_updatedBy = api_schema_response.schema.updatedBy;","                                    var schema_language = api_schema_response.schema.language;","                                    var schema_createdAt = api_schema_response.schema.createdAt;","                                    var schema_updatedAt = api_schema_response.schema.updatedAt;","                                    var schema_body = api_schema_response.schema.schema;","                                    if(schema_type=='openapi3'){","                                        \/\/ We Have Our Schema","                                        \/\/console.log(schema_body);","                                        ","                                        pm.environment.set(\"openapi_current\", schema_body);","                                        ","                                        var oas = JSON.parse(schema_body);","                                        ","                                        \/\/ Assumption - That schema array is table name -- only focused on one resource per openapi","                                        for (const [schema, object] of Object.entries(oas.components.schemas)) {","                                           if(object.type === 'array'){","                                               table_name = schema;","                                               table_name = table_name.replace(\" \",\"_\");","                                               table_name = table_name.toLowerCase()","                                               pm.environment.set(\"aws_dynamodb_table_name\", table_name);","                                           }","                                           if(object.type === 'object'){","                                               if(schema==='Error'){","                                               }","                                               else{","                                               resource_name = schema;","                                               resource_slug = resource_name.replace(\" \",\"_\");","                                               resource_slug = resource_slug.toLowerCase();","                                               }","                                           }     ","                                        }   ","                                        ","                                        ","                                    }","                                    ","                                    }","                                });                                ","                                        ","                                ","                                ","                            }","                        });","                        ","                    }","                }","                ","            }","        });","        ","    }","","}"],"type":"text\/javascript"}}],"folder":null,"responses":[{"id":"74d0ec55-8454-4a46-b1fb-2d6067098590","name":"Get single API","status":"OK","mime":"","language":"json","text":"{\n\t\"api\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t}\n}","responseCode":{"code":200,"name":"OK","detail":""},"requestObject":{"id":"0053cb68-834f-4863-8aaf-93c3f9a112b6","method":"GET","headers":"x-api-key: {{apiKey}}\nContent-Type: application\/json","url":"{{url}}\/apis\/{{apiId}}","pathVariableData":[],"queryParams":[],"headerData":[{"key":"x-api-key","value":"{{apiKey}}","type":"text"},{"key":"Content-Type","name":"Content-Type","value":"application\/json","type":"text"}],"dataMode":null,"data":null},"headers":[],"cookies":[],"request":"2be86e68-03f0-472f-b008-cfbc0abe8459","collection":"e81e0e06-6dde-4f84-a13a-077706847aa6"}],"preRequestScript":null,"tests":"var response = pm.response.json();\n\nvar postman_api_key = pm.environment.get(\"postman_api_key\");\n\nvar apis = response.apis;\n\n\/\/ parse the query string\nconst paramsString = request.url.split('?')[1];\nconst eachParamArray = paramsString.split('&');\nlet params = {};\neachParamArray.forEach((param) => {\n    const key = param.split('=')[0];\n    const value = param.split('=')[1];\n    Object.assign(params, {[key]: value});\n});\n\n\/\/ set incoming values\nvar api_request_name = params.api_name;\nvar api_request_version = params.api_version;\nif(api_request_version===''){\n    api_request_version = 'Draft';\n}\n\npm.environment.set(\"postman_api_name\", api_request_name);\n\n\/\/ loop through each api\nfor (aIndex = 0; aIndex < apis.length; aIndex++) {\n    \n    var api_id = apis[aIndex].id;\n    var api_name = apis[aIndex].name;\n    var api_summary = apis[aIndex].summary;\n    var api_description = apis[aIndex].description;\n    var api_createdAt = apis[aIndex].createdAt;\n    var api_updatedAt = apis[aIndex].updatedAt;\n    var api_createdBy = apis[aIndex].createdBy;\n    var api_updatedBy = apis[aIndex].updatedBy;\n    \n    \/\/ if our incoming api matches then this is our API\n    if(api_request_name==api_name){\n        \n        console.log(\"API ID: \" + api_id);\n        console.log(\"API Name: \" + api_name);\n        \n        var postman_api_url = 'https:\/\/api.getpostman.com\/apis\/' + api_id + '\/versions';\n        \n        const apiVersionsRequest = {\n          url: postman_api_url,\n          method: 'GET',\n          header: 'x-api-key:' + postman_api_key\n        };\n        \n        pm.sendRequest(apiVersionsRequest, function (err, res) {\n            if (err) {\n                console.log(err);\n            } else {  \n                \n                var api_version_response = res.json();\n                \n                var versions = api_version_response.versions;\n                \n                \/\/console.log(versions);\n                \n                for (vIndex = 0; vIndex < versions.length; vIndex++) {\n                    \n                    version_id = versions[vIndex].id;\n                    version_name = versions[vIndex].name;\n                    api_id = versions[vIndex].api;\n                    version_createdAt = versions[vIndex].createdAt;\n                    version_updatedAt = versions[vIndex].updatedAt;\n                    version_createdBy = versions[vIndex].createdBy;\n                    version_updatedBy = versions[vIndex].updatedBy;\n                    version_lastRevision = versions[vIndex].lastRevision;\n        \n                    pm.environment.set(\"postman_api_id\", api_id);\n                    pm.environment.set(\"postman_api_version_id\", version_id);\n                    pm.environment.set(\"postman_api_version_name\", version_name);         \n\n                    if(api_request_version===version_name){\n                        \n                        \/\/console.log(version_id + ' - ' + version_name);\n                        \n                        var postman_versions_url = 'https:\/\/api.getpostman.com\/apis\/' + api_id + '\/versions\/' + version_id;\n                        \n                        const apiVersionRequest = {\n                          url: postman_versions_url,\n                          method: 'GET',\n                          header: 'x-api-key:' + postman_api_key\n                        };\n                        \n                        pm.sendRequest(apiVersionRequest, function (err, res) {\n                            if (err) {\n                                console.log(err);\n                            } else {  \n                                \n                                var api_version_detail_response = res.json();   \n                                \n                                var schema_id = api_version_detail_response.version.schema[0];\n                                pm.environment.set(\"postman_schema_id\", schema_id);\n                                \n                                \/\/console.log(\"schema_id: \" + schema_id);\n                                        \n                                var postman_schema_url = 'https:\/\/api.getpostman.com\/apis\/' + api_id + '\/versions\/' + version_id + '\/schemas\/' + schema_id;\n                                \n                                const apiSchemaRequest = {\n                                  url: postman_schema_url,\n                                  method: 'GET',\n                                  header: 'x-api-key:' + postman_api_key\n                                };\n                                \n                                pm.sendRequest(apiSchemaRequest, function (err, res) {\n                                    if (err) {\n                                        console.log(err);\n                                    } else {  \n                                        \n                                    var api_schema_response = res.json();  \n                                    \/\/console.log(api_schema_response);\n                                    \n                                    var schema_type = api_schema_response.schema.type;\n                                    var schema_createdBy = api_schema_response.schema.createdBy;\n                                    var schema_updatedBy = api_schema_response.schema.updatedBy;\n                                    var schema_language = api_schema_response.schema.language;\n                                    var schema_createdAt = api_schema_response.schema.createdAt;\n                                    var schema_updatedAt = api_schema_response.schema.updatedAt;\n                                    var schema_body = api_schema_response.schema.schema;\n                                    if(schema_type=='openapi3'){\n                                        \/\/ We Have Our Schema\n                                        \/\/console.log(schema_body);\n                                        \n                                        pm.environment.set(\"openapi_current\", schema_body);\n                                        \n                                        var oas = JSON.parse(schema_body);\n                                        \n                                        \/\/ Assumption - That schema array is table name -- only focused on one resource per openapi\n                                        for (const [schema, object] of Object.entries(oas.components.schemas)) {\n                                           if(object.type === 'array'){\n                                               table_name = schema;\n                                               table_name = table_name.replace(\" \",\"_\");\n                                               table_name = table_name.toLowerCase()\n                                               pm.environment.set(\"aws_dynamodb_table_name\", table_name);\n                                           }\n                                           if(object.type === 'object'){\n                                               if(schema==='Error'){\n                                               }\n                                               else{\n                                               resource_name = schema;\n                                               resource_slug = resource_name.replace(\" \",\"_\");\n                                               resource_slug = resource_slug.toLowerCase();\n                                               }\n                                           }     \n                                        }   \n                                        \n                                        \n                                    }\n                                    \n                                    }\n                                });                                \n                                        \n                                \n                                \n                            }\n                        });\n                        \n                    }\n                }\n                \n            }\n        });\n        \n    }\n\n}","currentHelper":null,"helperAttributes":null,"collectionId":"e81e0e06-6dde-4f84-a13a-077706847aa6","headers":"x-api-key: {{postman_api_key}}\n","pathVariables":[]},{"id":"61780cad-152d-4011-9db8-7e47a327fbaf","name":"5. Deploy API Toi a Stage (AWS API Gateway)","url":"{{aws_api_gateway_base_url}}\/restapis\/:api_id\/deployments","description":"This actually takes the OpenAPI definition that was generated from the Postman API and deploys it to AWS API Gateway. This is the final step of the process, which will make the API accessible via URL. It will still need to be made available via a usage plan, and have key generated and associated, but should produce a usable API.","data":[],"dataOptions":null,"dataMode":"raw","headerData":[],"method":"POST","pathVariableData":[{"key":"api_id","value":"{{aws_api_gateway_api_id}}"}],"queryParams":[],"auth":{"awsv4":[{"key":"service","type":"string","value":"{{aws_api_gateway_control_plane_service}}"},{"key":"secretKey","type":"string","value":"{{secretKey}}"},{"key":"accessKey","type":"string","value":"{{accessKey}}"},{"key":"region","type":"string","value":"{{aws_api_gateway_control_plane_region}}"}],"type":"awsv4"},"events":[{"listen":"test","script":{"id":"b4cceb24-9550-4feb-85c9-d417e13258a6","exec":["const jsonData = pm.response.json();","var deployment_id = jsonData.id;","pm.environment.set(\"aws_api_gateway_deployment_id\", deployment_id);","","body = JSON.parse(request.data);","","aws_api_gateway_api_id = pm.environment.get(\"aws_api_gateway_api_id\");","aws_api_gateway_control_plane_region = pm.environment.get(\"aws_api_gateway_control_plane_region\");","aws_api_gateway_stage_name = body.stageName;","pm.environment.set(\"aws_api_gateway_stage_name\", aws_api_gateway_stage_name);","","aws_api_gateway_invoke_url = 'https:\/\/' + aws_api_gateway_api_id + '.execute-api.' + aws_api_gateway_control_plane_region + '.amazonaws.com\/' + aws_api_gateway_stage_name;","pm.environment.set(\"aws_api_gateway_invoke_url\", aws_api_gateway_invoke_url);",""],"type":"text\/javascript"}}],"folder":null,"preRequestScript":null,"tests":"const jsonData = pm.response.json();\nvar deployment_id = jsonData.id;\npm.environment.set(\"aws_api_gateway_deployment_id\", deployment_id);\n\nbody = JSON.parse(request.data);\n\naws_api_gateway_api_id = pm.environment.get(\"aws_api_gateway_api_id\");\naws_api_gateway_control_plane_region = pm.environment.get(\"aws_api_gateway_control_plane_region\");\naws_api_gateway_stage_name = body.stageName;\npm.environment.set(\"aws_api_gateway_stage_name\", aws_api_gateway_stage_name);\n\naws_api_gateway_invoke_url = 'https:\/\/' + aws_api_gateway_api_id + '.execute-api.' + aws_api_gateway_control_plane_region + '.amazonaws.com\/' + aws_api_gateway_stage_name;\npm.environment.set(\"aws_api_gateway_invoke_url\", aws_api_gateway_invoke_url);\n","currentHelper":"awsSigV4","helperAttributes":{"service":"{{aws_api_gateway_control_plane_service}}","secretKey":"{{secretKey}}","accessKey":"{{accessKey}}","region":"{{aws_api_gateway_control_plane_region}}"},"collectionId":"e81e0e06-6dde-4f84-a13a-077706847aa6","rawModeData":"{\n  \"stageName\" : \"development\",\n  \"stageDescription\" : \"Deploying a development copy of the API.\",\n  \"description\" : \"Automating the deployment from Postman.\"\n}","headers":"","pathVariables":{"api_id":"{{aws_api_gateway_api_id}}"}},{"id":"762f981e-90d1-461a-8a7c-ab4ed87b4194","name":"6. Usage Plan (AWS API Gateway)","url":"{{aws_api_gateway_base_url}}\/usageplans\/","description":"Adds a usage plan, and sets the envioronment with the id for the usage plan so it can be associated with the key and other aspects of operations.","data":[],"dataOptions":null,"dataMode":"raw","headerData":[],"method":"POST","pathVariableData":[],"queryParams":[],"auth":{"awsv4":[{"key":"service","type":"string","value":"{{aws_api_gateway_control_plane_service}}"},{"key":"secretKey","type":"string","value":"{{secretKey}}"},{"key":"accessKey","type":"string","value":"{{accessKey}}"},{"key":"region","type":"string","value":"{{aws_api_gateway_control_plane_region}}"}],"type":"awsv4"},"events":[{"listen":"test","script":{"id":"0e2f6e54-7204-4191-ae7a-eaba6410352f","exec":["const jsonData = pm.response.json();","var usage_plan_id = jsonData.id;","pm.environment.set(\"aws_api_gateway_usage_plan_id\", usage_plan_id);"],"type":"text\/javascript"}}],"folder":null,"preRequestScript":null,"tests":"const jsonData = pm.response.json();\nvar usage_plan_id = jsonData.id;\npm.environment.set(\"aws_api_gateway_usage_plan_id\", usage_plan_id);","currentHelper":"awsSigV4","helperAttributes":{"service":"{{aws_api_gateway_control_plane_service}}","secretKey":"{{secretKey}}","accessKey":"{{accessKey}}","region":"{{aws_api_gateway_control_plane_region}}"},"collectionId":"e81e0e06-6dde-4f84-a13a-077706847aa6","rawModeData":"{\n  \"name\": \"Mission Control\",\n  \"description\": \"The primary usage plan.\",\n  \"quota\": {\n    \"period\": \"DAY\",\n    \"offset\": 0,\n    \"limit\": 500\n  },\n  \"apiStages\": [ {\n    \"stage\": \"{{aws_api_gateway_stage_name}}\",\n    \"apiId\": \"{{aws_api_gateway_api_id}}\"\n  }],  \n  \"throttle\": {\n    \"rateLimit\": 100,\n    \"burstLimit\": 200\n  }\n}","headers":"","pathVariables":[]},{"id":"8ce6e540-3d14-41d5-a70a-8ff4603e23d9","name":"9. Make GET Request to API","url":"{{aws_api_gateway_invoke_url}}\/{{aws_dynamodb_table_name}}","description":"This actually makes a call to the API, pulling any records that are available.","data":null,"dataOptions":null,"dataMode":null,"headerData":[{"key":"x-api-key","value":"{{aws_api_gateway_key}}","description":"","type":"text","enabled":true}],"method":"GET","pathVariableData":[],"queryParams":[],"auth":{"type":"noauth","noauth":[]},"events":null,"folder":null,"currentHelper":null,"helperAttributes":null,"collectionId":"e81e0e06-6dde-4f84-a13a-077706847aa6","headers":"x-api-key: {{aws_api_gateway_key}}\n","pathVariables":[]},{"id":"ad9e03f4-6762-409a-b8e6-ffc948e3cc1e","name":"2. Create Table (AWS DynamoDB)","url":"{{aws_dynamodb_base_url}}\/?Action=CreateTable","description":"This creates a new table in DynamoDB for using as the backend of this API. While a simple step, it is one that might need to be inter changeable with other database backends, so I'm keeping exposed as its own step.","data":[],"dataOptions":null,"dataMode":"raw","headerData":[{"key":"X-Amz-Target","value":"DynamoDB_20120810.CreateTable","type":"text","enabled":true,"description":""},{"warning":"This is a duplicate header and will be overridden by the Content-Type header generated by Postman.","key":"Content-Type","value":"application\/x-amz-json-1.0","type":"text","enabled":true,"description":""}],"method":"POST","pathVariableData":[],"queryParams":[{"key":"Action","value":"CreateTable","equals":true,"description":"An array of attributes that describe the key schema for the table and indexes.","enabled":true}],"auth":{"type":"awsv4","awsv4":[{"key":"service","value":"{{aws_dynamodb_service}}"},{"key":"region","value":"{{aws_dynamodb_region}}"},{"key":"secretKey","value":"{{secretKey}}","type":"string"},{"key":"accessKey","value":"{{accessKey}}","type":"string"}]},"events":[{"listen":"test","script":{"id":"fd9a9575-0dc1-43cd-bafb-96feb54ae4ae","exec":["const jsonData = pm.response.json();","var table_id = jsonData.TableDescription.TableId;","pm.environment.set(\"aws_dynamodb_table_id\", table_id);"],"type":"text\/javascript"}}],"folder":null,"responses":[{"id":"f2294d64-a80d-47b7-a4fd-d507b3d4ba70","name":"Create Table","status":null,"mime":null,"language":"json","text":"{\n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"ForumName\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"LastPostDateTime\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"Subject\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"CreationDateTime\": 1574831102.349,\n        \"ItemCount\": 0,\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"ForumName\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"Subject\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"LocalSecondaryIndexes\": [\n            {\n                \"IndexArn\": \"arn:aws:dynamodb:us-east-1:879370021840:table\/Thread\/index\/LastPostIndex\",\n                \"IndexName\": \"LastPostIndex\",\n                \"IndexSizeBytes\": 0,\n                \"ItemCount\": 0,\n                \"KeySchema\": [\n                    {\n                        \"AttributeName\": \"ForumName\",\n                        \"KeyType\": \"HASH\"\n                    },\n                    {\n                        \"AttributeName\": \"LastPostDateTime\",\n                        \"KeyType\": \"RANGE\"\n                    }\n                ],\n                \"Projection\": {\n                    \"ProjectionType\": \"KEYS_ONLY\"\n                }\n            }\n        ],\n        \"ProvisionedThroughput\": {\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 5,\n            \"WriteCapacityUnits\": 5\n        },\n        \"TableArn\": \"arn:aws:dynamodb:us-east-1:879370021840:table\/Thread\",\n        \"TableId\": \"43fce991-2bb5-4e44-b34c-6c5dbcee50e4\",\n        \"TableName\": \"Thread\",\n        \"TableSizeBytes\": 0,\n        \"TableStatus\": \"CREATING\"\n    }\n}","responseCode":{"code":200,"name":"OK"},"requestObject":{"data":[],"dataMode":"raw","dataOptions":null,"headerData":[{"key":"X-Amz-Target","value":"DynamoDB_20120810.CreateTable","type":"text","enabled":true,"description":""},{"warning":"This is a duplicate header and will be overridden by the Content-Type header generated by Postman.","key":"Content-Type","value":"application\/x-amz-json-1.0","type":"text","enabled":true,"description":""}],"method":"POST","pathVariableData":[],"queryParams":[{"key":"Action","value":"CreateTable","equals":true,"description":"An array of attributes that describe the key schema for the table and indexes.","enabled":true}],"url":"{{aws_dynamodb_base_url}}\/?Action=CreateTable","rawModeData":"{\n    \"AttributeDefinitions\": [\n        {\n            \"AttributeName\": \"ForumName\",\n            \"AttributeType\": \"S\"\n        },\n        {\n            \"AttributeName\": \"Subject\",\n            \"AttributeType\": \"S\"\n        },\n        {\n            \"AttributeName\": \"LastPostDateTime\",\n            \"AttributeType\": \"S\"\n        }\n    ],\n    \"TableName\": \"Thread\",\n    \"KeySchema\": [\n        {\n            \"AttributeName\": \"ForumName\",\n            \"KeyType\": \"HASH\"\n        },\n        {\n            \"AttributeName\": \"Subject\",\n            \"KeyType\": \"RANGE\"\n        }\n    ],\n    \"LocalSecondaryIndexes\": [\n        {\n            \"IndexName\": \"LastPostIndex\",\n            \"KeySchema\": [\n                {\n                    \"AttributeName\": \"ForumName\",\n                    \"KeyType\": \"HASH\"\n                },\n                {\n                    \"AttributeName\": \"LastPostDateTime\",\n                    \"KeyType\": \"RANGE\"\n                }\n            ],\n            \"Projection\": {\n                \"ProjectionType\": \"KEYS_ONLY\"\n            }\n        }\n    ],\n    \"ProvisionedThroughput\": {\n        \"ReadCapacityUnits\": 5,\n        \"WriteCapacityUnits\": 5\n    },\n    \"Tags\": [ \n      { \n         \"Key\": \"Owner\",\n         \"Value\": \"BlueTeam\"\n      }\n   ]\n}"},"headers":[{"key":"Server","value":"Server"},{"key":"Date","value":"Wed, 27 Nov 2019 05:05:02 GMT"},{"key":"Content-Type","value":"application\/x-amz-json-1.0"},{"key":"Content-Length","value":"972"},{"key":"Connection","value":"keep-alive"},{"key":"x-amzn-RequestId","value":"D8CA21J1HGEH7VTLHOOBLBPJH7VV4KQNSO5AEMVJF66Q9ASUAAJG"},{"key":"x-amz-crc32","value":"613555308"}],"cookies":null,"request":"ad9e03f4-6762-409a-b8e6-ffc948e3cc1e","collection":"e81e0e06-6dde-4f84-a13a-077706847aa6"}],"preRequestScript":null,"tests":"const jsonData = pm.response.json();\nvar table_id = jsonData.TableDescription.TableId;\npm.environment.set(\"aws_dynamodb_table_id\", table_id);","currentHelper":"awsSigV4","helperAttributes":{"service":"{{aws_dynamodb_service}}","region":"{{aws_dynamodb_region}}","secretKey":"{{secretKey}}","accessKey":"{{accessKey}}"},"collectionId":"e81e0e06-6dde-4f84-a13a-077706847aa6","rawModeData":"{\n    \"AttributeDefinitions\": [\n        {\n            \"AttributeName\": \"id\",\n            \"AttributeType\": \"S\"\n        }\n    ],\n    \"TableName\": \"{{aws_dynamodb_table_name}}\",\n    \"KeySchema\": [\n                {\n                    \"AttributeName\": \"id\",\n                    \"KeyType\": \"HASH\"\n                }\n    ],\n    \"ProvisionedThroughput\": {\n        \"ReadCapacityUnits\": 5,\n        \"WriteCapacityUnits\": 5\n    },\n    \"Tags\": [ \n      { \n         \"Key\": \"Owner\",\n         \"Value\": \"Postman\"\n      }\n   ]\n}","headers":"X-Amz-Target: DynamoDB_20120810.CreateTable\nContent-Type: application\/x-amz-json-1.0\n","pathVariables":[]},{"id":"dbfd6b1d-ddff-47d8-808f-7c01a005a342","name":"3. Prepare API For Publishing","url":"{{postman_base_url}}\/apis\/?workspace_name=API LIfe Cycle&api_name=Asteroids&api_version=Draft","description":"This actually takes the OpenAPI for the API in Postman and builds an OpenAPI version of it for deploying to AWS API Gateway, complete with all of the integration bindings needed to connect teh API with the backend AWS DynamoDB database. I am keeping it as its own step because of possibly adding in Lambda and other integrations might warrant for a separate set of bindings to be sent over.","data":null,"dataOptions":null,"dataMode":null,"headerData":[{"key":"x-api-key","type":"text","value":"{{postman_api_key}}"},{"key":"Content-Type","name":"Content-Type","type":"text","value":"application\/json"}],"method":"GET","pathVariableData":[],"queryParams":[{"key":"workspace_name","value":"API LIfe Cycle","equals":true,"description":"","enabled":true},{"key":"api_name","value":"Asteroids","equals":true,"description":"","enabled":true},{"key":"api_version","value":"Draft","equals":true,"description":"","enabled":true}],"auth":null,"events":[{"listen":"test","script":{"id":"ccc0ffb4-5acd-48d4-a15c-ac84e31e1bc9","exec":["var postman_api_key = pm.environment.get(\"postman_api_key\");","","var aws_iam_role = pm.environment.get(\"aws_iam_role\");","","var postman_api_id = pm.environment.get(\"postman_api_id\");","var postman_api_version_id = pm.environment.get(\"postman_api_version_id\");","var postman_schema_id = pm.environment.get(\"postman_schema_id\");","             ","var table_name = \"\";  ","var resource_name = \"\";","                                        ","var postman_schema_url = 'https:\/\/api.getpostman.com\/apis\/' + postman_api_id + '\/versions\/' + postman_api_version_id + '\/schemas\/' + postman_schema_id;","","const apiSchemaRequest = {","  url: postman_schema_url,","  method: 'GET',","  header: 'x-api-key:' + postman_api_key","};","","pm.sendRequest(apiSchemaRequest, function (err, res) {","    if (err) {","        console.log(err);","    } else {  ","        ","    var api_schema_response = res.json();  ","    console.log(api_schema_response);","    ","    var schema_type = api_schema_response.schema.type;","    var schema_createdBy = api_schema_response.schema.createdBy;","    var schema_updatedBy = api_schema_response.schema.updatedBy;","    var schema_language = api_schema_response.schema.language;","    var schema_createdAt = api_schema_response.schema.createdAt;","    var schema_updatedAt = api_schema_response.schema.updatedAt;","    var schema_body = api_schema_response.schema.schema;","    if(schema_type=='openapi3'){","        ","        \/\/ We Have Our Schema","        \/\/console.log(schema_body);","        var oas = JSON.parse(schema_body);","        ","        \/\/ Assumption - That schema array is table name -- only focused on one resource per openapi","        for (const [schema, object] of Object.entries(oas.components.schemas)) {","           if(object.type === 'array'){","               table_name = schema;","               table_name = table_name.replace(\" \",\"_\");","               table_name = table_name.toLowerCase()","               pm.environment.set(\"aws_dynamodb_table_name\", table_name);","           }","           if(object.type === 'object'){","               if(schema==='Error'){","               }","               else{","               resource_name = schema;","               resource_slug = resource_name.replace(\" \",\"_\");","               resource_slug = resource_slug.toLowerCase();","               }","           }     ","        }","        ","        \/\/console.log(\"table_name: \" + table_name);","        \/\/console.log(\"resource_name: \" + resource_name);","        \/\/console.log(oas);","        ","        for (const [path, methods] of Object.entries(oas.paths)) {","          ","            console.log(path);","          ","            for (const [verb, method] of Object.entries(methods)) {","                ","                console.log(verb);","\/\/                console.log(method);","                ","                if(verb.toLowerCase() === 'get'){","                    ","                    detail = path.includes(\"{\");","                    if(detail)","                        {","                            ","                        \/\/ detail    ","                        var integration = {};","                        integration.credentials = aws_iam_role;","                        integration.uri = \"arn:aws:apigateway:us-east-1:dynamodb:action\/Query\";  ","                        integration.responses = {};   ","                        ","                        for (const [status, response] of Object.entries(method.responses)) {","                            if(status == '200')","                                {"," ","                                integration.responses.default = {}; ","                                integration.responses.default.statusCode = status;","                                integration.responses.default.responseTemplates = {}; ","                                ","                                var detail_template = \"#set($inputRoot = $input.path('$'))\";","                                detail_template = detail_template + \"\\n    #foreach($elem in $inputRoot.Items){\";","","                                schema_details = oas.components.schemas[resource_name];","                                ","                                var detail_rows = \"\";","                                for (const [name, property] of Object.entries(schema_details.properties)) {","                                    detail_rows = detail_rows + '        \\\"' + name + '\\\": \\\"$elem.' + name + '.S\\\",';","                                }","                                detail_rows = detail_rows.substr(0,detail_rows.length-1);","                                detail_template = detail_template + detail_rows;                                ","      ","                                detail_template = detail_template + \"    }#if($foreach.hasNext),#end\\n#end\";","                                ","                                integration.responses.default.responseTemplates['application\/json'] = detail_template;","                                }","                            }","                        ","                        integration.requestParameters = {};","                        integration.requestParameters['integration.request.path.' + resource_slug + '_id'] = 'method.request.path.' + resource_slug + '_id';                        ","                        ","                        integration.passthroughBehavior = \"when_no_templates\";","                        integration.httpMethod = \"POST\";","                        integration.requestTemplates = {};","                        integration.type = \"aws\";","                        ","                        schema_details = oas.components.schemas[resource_name];","                        ","                        var fields = \"\";","                        for (const [name, property] of Object.entries(schema_details.properties)) {","                            \/\/console.log(\"name: \" + name);","                            fields = fields + name + ',';","                        }","                        fields = fields.substr(0,fields.length-1);                        ","                        \/\/console.log(\"fields: \" + fields);","                        ","                        requestTemplates = '{\\n    \\\"TableName\\\": \\\"' + table_name + '\\\",\\n    \\\"ProjectionExpression\\\": \\\"' + fields + '\\\",\\n    \\\"KeyConditionExpression\\\": \\\"id = :v1\\\",\\n    \\\"ExpressionAttributeValues\\\": {\\n        \\\":v1\\\": {\\n            \\\"S\\\": \\\"$input.params(' + '\"' + resource_slug + '_id' + '\"' + ')\\\"\\n        }\\n    }\\n}';","                      ","                        integration.requestTemplates['application\/json'] = requestTemplates;","                        ","                        oas.paths[path][verb]['x-amazon-apigateway-integration'] = integration;","                            ","                        }","                    else","                        {","                            ","                        \/\/ listing    ","                        var integration = {};","                        integration.credentials = \"arn:aws:iam::879370021840:role\/aws-api-gateway-lambda-2\";","                        integration.uri = \"arn:aws:apigateway:us-east-1:dynamodb:action\/Scan\";  ","                        integration.responses = {};   ","                        ","                        for (const [status, response] of Object.entries(method.responses)) {","                            if(status == '200')","                                {"," ","                                integration.responses.default = {}; ","                                integration.responses.default.statusCode = status;","                                integration.responses.default.responseTemplates = {}; ","                                ","                                schema_details = oas.components.schemas[resource_name];","                                ","                                var properties = \"\";","                                for (const [name, property] of Object.entries(schema_details.properties)) {","                                    properties = properties + '\\n        \\\"' + name + '\\\": \\\"$elem.' + name + '.S\\\",';","                                }","                                properties = properties.substr(0,properties.length-1);","                                ","                                ","                                responseTemplate = \"#set($inputRoot = $input.path('$'))\";","                                responseTemplate = responseTemplate + \"\\n[\\n    #foreach($elem in $inputRoot.Items) {\";","                                ","                                responseTemplate = responseTemplate + properties;","      ","                                responseTemplate = responseTemplate + \"\\n    }#if($foreach.hasNext),#end\\n#end\";","                                responseTemplate = responseTemplate + \"\\n]\";","                                ","                                integration.responses.default.responseTemplates['application\/json'] = responseTemplate;","                                }","                            }","                        ","                        integration.passthroughBehavior = \"when_no_templates\";","                        integration.httpMethod = \"POST\";","                        integration.requestTemplates = {};","                        integration.type = \"aws\";","                        ","                        requestTemplates = '{\\n    \\\"TableName\\\": \\\"' + table_name + '\\\",\\n    \\\"ReturnConsumedCapacity\\\": \\\"TOTAL\\\"\\n}';","                      ","                        integration.requestTemplates['application\/json'] = requestTemplates;","                        ","                        oas.paths[path][verb]['x-amazon-apigateway-integration'] = integration;","                        ","                    }","                }","                ","                if(verb.toLowerCase() === 'post'){","                ","                    \/\/ POST    ","                    integration = {};","                    integration.credentials = aws_iam_role;","                    integration.uri = \"arn:aws:apigateway:us-east-1:dynamodb:action\/PutItem\";  ","                    integration.responses = {};   ","                    ","                    for (const [status, response] of Object.entries(method.responses)) {","                        if(status == '201')","                            {","                            \/\/console.log(response);","                            integration.responses.default = {}; ","                            integration.responses.default.statusCode = status;","                        ","                            integration.responses.default.responseTemplates = {}; ","                            integration.responses.default.responseTemplates['application\/json'] = \"{}\";                            ","                            ","                            }","                        }","                    ","                    integration.passthroughBehavior = \"when_no_templates\";","                    integration.httpMethod = \"POST\";","                    integration.requestTemplates = {};","                    integration.type = \"aws\";","                    ","                    post_request_template = '{\\n  \\\"TableName\\\": \\\"' + table_name + '\\\",\\n  \\\"Item\\\": {\\n';    ","                    ","                    post_schema_details = oas.components.schemas[resource_name];","                    ","                    var post_rows = \"\";","                    for (const [name, property] of Object.entries(post_schema_details.properties)) {","                        if(name != 'id'){","                            post_rows = post_rows + \"      #set($\" + name + \" = $input.json('\" + name + \"'))\\n\";","                            post_rows = post_rows + \"      #if($\" + name + \".length() < 3) \\n\";      ","                            post_rows = post_rows + '            \\\"' + name + '\\\": {      \\\"S\\\": \"EMPTY\"    },\\n';","                            post_rows = post_rows + '      #else\\n';                            ","                            post_rows = post_rows + '            \\\"' + name + '\\\": {      \\\"S\\\": $input.json(' + \"'\" + name + \"'\" + ')    },\\n';","                            post_rows = post_rows + '      #end\\n';","                        }","                    }","","                    post_rows = post_rows + '\\\"id\\\": {\\n      \\\"S\\\": \\\"$context.requestId\\\"\\n    }\\n';","","                    post_request_template = post_request_template + post_rows;                    ","","                    post_request_template = post_request_template + '\\n}}';","                  ","                    integration.requestTemplates['application\/json'] = post_request_template;","                    ","                    oas.paths[path][verb]['x-amazon-apigateway-integration'] = integration;","","                } ","                ","                if(verb.toLowerCase() === 'put'){","                    ","                    \/\/ PUT","                    integration = {};","                    integration.credentials = aws_iam_role;","                    integration.uri = \"arn:aws:apigateway:us-east-1:dynamodb:action\/UpdateItem\";  ","                    integration.responses = {};   ","                    ","                    for (const [status, response] of Object.entries(method.responses)) {","                        if(status == '204')","                            {","                            \/\/console.log(response);","                            integration.responses.default = {}; ","                            integration.responses.default.statusCode = status;","                            integration.responses.default.responseTemplates = {};","                            integration.responses.default.responseTemplates['application\/json'] = \"{}\";","                            }","                        }","                    ","                    integration.requestParameters = {};","                    integration.requestParameters['integration.request.path.' + resource_slug + '_id'] = 'method.request.path.' + resource_slug + '_id';","                    ","                    integration.passthroughBehavior = \"when_no_templates\";","                    integration.httpMethod = \"POST\";","                    integration.requestTemplates = {};","                    integration.type = \"aws\";","                    ","                    schema_details = oas.components.schemas[resource_name];","                    ","                    put_template = '{\\n';","                    put_template = put_template + '  \"TableName\": \"asteroids\",\\n';","                    put_template = put_template + '    \"Key\": {\\n';","                    put_template = put_template + '        \"id\": {\\n';","                    put_template = put_template + '            \"S\": \"$input.params(' + \"'\" + resource_slug + '_id' + \"'\" + ')\"\\n';","                    put_template = put_template + '        }\\n';     ","                    put_template = put_template + '    },\\n';","                    ","                    var put_rows = \"\";","                    var count_property = 1;","                    for (const [name, property] of Object.entries(schema_details.properties)) {   ","                        if(name != 'id'){","                            put_rows = put_rows + name + ' = :val' + count_property + ',';","                            count_property++;","                        }","                    }","                    put_rows = put_rows.substr(0,put_rows.length-1);","                    ","                    put_template = put_template + '\"UpdateExpression\": \"SET ' + put_rows + '\",\\n';","                    ","                    put_template = put_template + '\"ExpressionAttributeValues\": {\\n';","                    ","                    var put_rows = \"\";","                    var count_property = 1;","                    for (const [name, property] of Object.entries(schema_details.properties)) {                     ","                        if(name != 'id'){","                            put_rows = put_rows + \"      #set($\" + name + \" = $input.json('\" + name + \"'))\\n\";","                            put_rows = put_rows + \"      #if($\" + name + \".length() < 2) \\n\";      ","                            put_rows = put_rows + '            \":val' + count_property + '\": {\"S\": \"NULL\"},\\n';","                            put_rows = put_rows + '      #else\\n';                            ","                            put_rows = put_rows + '            \":val' + count_property + '\": {\"S\": $input.json(' + \"'\" + name + \"'\" + ')},\\n';","                            put_rows = put_rows + '      #end\\n';","                            count_property++;","                        }","                    }","                    put_rows = put_rows.substr(0,put_rows.length-13);","                    put_template = put_template + put_rows + '\\n      #end\\n'; ","                    put_template = put_template + '\\n    },\\n    \\\"ReturnValues\\\": \\\"ALL_NEW\\\"\\n}';","","                    \/\/put_template = put_template + '}';","                  ","                    integration.requestTemplates['application\/json'] = put_template;","                    ","                    oas.paths[path][verb]['x-amazon-apigateway-integration'] = integration;                    ","                    ","            ","                }   ","                ","                if(verb.toLowerCase() === 'delete'){","                    ","                    var integration = {};","                    integration.credentials = aws_iam_role;","                    integration.uri = \"arn:aws:apigateway:us-east-1:dynamodb:action\/DeleteItem\";  ","                    integration.responses = {};   ","                    ","                    for (const [status, response] of Object.entries(method.responses)) {","                        if(status == '202')","                            {","                            integration.responses.default = {}; ","                            integration.responses.default.statusCode = status;","                            integration.responses.default.responseTemplates = {};","                            integration.responses.default.responseTemplates['application\/json'] = \"{}\";","                            }","                        }","                    ","                    integration.passthroughBehavior = \"when_no_templates\";","                    integration.httpMethod = \"POST\";","                    integration.requestTemplates = {};","                    integration.type = \"aws\";","   ","                    requestTemplates = '{\\n';","                    requestTemplates = requestTemplates + '    \"TableName\": \"' + table_name + '\",\\n';","                    requestTemplates = requestTemplates + '    \"Key\": {\\n';","                    requestTemplates = requestTemplates + '        \"id\": {\\n';","                    requestTemplates = requestTemplates + '            \"S\": \"$input.params(' + \"'\" + resource_slug + '_id' + \"'\" + ')\\\"\\n';","                    requestTemplates = requestTemplates + '        }\\n';","                    requestTemplates = requestTemplates + '    },\\n';","                    requestTemplates = requestTemplates + '    \"ConditionExpression\": \"attribute_not_exists(Replies)\",\\n';","                    requestTemplates = requestTemplates + '    \"ReturnValues\": \"ALL_OLD\"\\n';","                    requestTemplates = requestTemplates + '}\\n';","                  ","                    integration.requestTemplates['application\/json'] = requestTemplates;","                    ","                    oas.paths[path][verb]['x-amazon-apigateway-integration'] = integration;                    ","                ","                    }                                                 ","                ","                }                                          ","            ","            }","            ","        \/\/console.log(JSON.stringify(oas));   ","        ","        pm.environment.set(\"openapi_build\", JSON.stringify(oas));","        ","        }","    ","    }","});                                ",""],"type":"text\/javascript"}}],"folder":null,"responses":[{"id":"08f5004f-b4b4-42f3-b059-d7b5eb07c7a0","name":"Create API - Manual","status":null,"mime":null,"language":"json","text":"{\n    \"api\": {\n        \"name\": \"Test API\",\n        \"description\": \"This is description.\",\n        \"summary\": \"This is supposed to be a short summary.\",\n        \"id\": \"66208311-ac3f-4054-9f61-7c752b24e4ed\",\n        \"createdBy\": \"35240\",\n        \"updatedBy\": \"35240\",\n        \"createdAt\": \"2019-12-26T19:40:00.196Z\",\n        \"updatedAt\": \"2019-12-26T19:40:00.196Z\"\n    }\n}","responseCode":{"code":200,"name":"OK"},"requestObject":{"data":[],"dataMode":"raw","dataOptions":null,"headerData":[{"key":"x-api-key","type":"text","value":"{{postman_api_key}}"},{"key":"Content-Type","name":"Content-Type","type":"text","value":"application\/json"}],"method":"POST","pathVariableData":[],"queryParams":[{"key":"workspace","value":"cfbd3a14-deeb-40d5-bde0-6c5740548f71","equals":true,"description":"","enabled":true}],"url":"{{postman_base_url}}\/apis?workspace=cfbd3a14-deeb-40d5-bde0-6c5740548f71","rawModeData":"{\n\t\"api\": {\n\t\t\"name\": \"Test API\",\n\t\t\"summary\": \"This is supposed to be a short summary.\",\n\t\t\"description\": \"This is description.\"\n\t}\n}"},"headers":[{"key":"Access-Control-Allow-Origin","value":"*"},{"key":"Content-Encoding","value":"gzip"},{"key":"Content-Type","value":"application\/json; charset=utf-8"},{"key":"Date","value":"Thu, 26 Dec 2019 19:40:00 GMT"},{"key":"ETag","value":"W\/\"116-jOKAht8GSz3jHNBBzyvhGTgV8vg\""},{"key":"Server","value":"nginx"},{"key":"Vary","value":"Accept-Encoding"},{"key":"x-frame-options","value":"SAMEORIGIN"},{"key":"X-RateLimit-Limit","value":"60"},{"key":"X-RateLimit-Remaining","value":"59"},{"key":"X-RateLimit-Reset","value":"1577389260"},{"key":"x-srv-span","value":"v=1;s=3be0b198de7191c5"},{"key":"x-srv-trace","value":"v=1;t=8dec9c1875308efd"},{"key":"Content-Length","value":"189"},{"key":"Connection","value":"keep-alive"}],"cookies":null,"request":"dbfd6b1d-ddff-47d8-808f-7c01a005a342","collection":"e81e0e06-6dde-4f84-a13a-077706847aa6"}],"preRequestScript":null,"tests":"var postman_api_key = pm.environment.get(\"postman_api_key\");\n\nvar aws_iam_role = pm.environment.get(\"aws_iam_role\");\n\nvar postman_api_id = pm.environment.get(\"postman_api_id\");\nvar postman_api_version_id = pm.environment.get(\"postman_api_version_id\");\nvar postman_schema_id = pm.environment.get(\"postman_schema_id\");\n             \nvar table_name = \"\";  \nvar resource_name = \"\";\n                                        \nvar postman_schema_url = 'https:\/\/api.getpostman.com\/apis\/' + postman_api_id + '\/versions\/' + postman_api_version_id + '\/schemas\/' + postman_schema_id;\n\nconst apiSchemaRequest = {\n  url: postman_schema_url,\n  method: 'GET',\n  header: 'x-api-key:' + postman_api_key\n};\n\npm.sendRequest(apiSchemaRequest, function (err, res) {\n    if (err) {\n        console.log(err);\n    } else {  \n        \n    var api_schema_response = res.json();  \n    console.log(api_schema_response);\n    \n    var schema_type = api_schema_response.schema.type;\n    var schema_createdBy = api_schema_response.schema.createdBy;\n    var schema_updatedBy = api_schema_response.schema.updatedBy;\n    var schema_language = api_schema_response.schema.language;\n    var schema_createdAt = api_schema_response.schema.createdAt;\n    var schema_updatedAt = api_schema_response.schema.updatedAt;\n    var schema_body = api_schema_response.schema.schema;\n    if(schema_type=='openapi3'){\n        \n        \/\/ We Have Our Schema\n        \/\/console.log(schema_body);\n        var oas = JSON.parse(schema_body);\n        \n        \/\/ Assumption - That schema array is table name -- only focused on one resource per openapi\n        for (const [schema, object] of Object.entries(oas.components.schemas)) {\n           if(object.type === 'array'){\n               table_name = schema;\n               table_name = table_name.replace(\" \",\"_\");\n               table_name = table_name.toLowerCase()\n               pm.environment.set(\"aws_dynamodb_table_name\", table_name);\n           }\n           if(object.type === 'object'){\n               if(schema==='Error'){\n               }\n               else{\n               resource_name = schema;\n               resource_slug = resource_name.replace(\" \",\"_\");\n               resource_slug = resource_slug.toLowerCase();\n               }\n           }     \n        }\n        \n        \/\/console.log(\"table_name: \" + table_name);\n        \/\/console.log(\"resource_name: \" + resource_name);\n        \/\/console.log(oas);\n        \n        for (const [path, methods] of Object.entries(oas.paths)) {\n          \n            console.log(path);\n          \n            for (const [verb, method] of Object.entries(methods)) {\n                \n                console.log(verb);\n\/\/                console.log(method);\n                \n                if(verb.toLowerCase() === 'get'){\n                    \n                    detail = path.includes(\"{\");\n                    if(detail)\n                        {\n                            \n                        \/\/ detail    \n                        var integration = {};\n                        integration.credentials = aws_iam_role;\n                        integration.uri = \"arn:aws:apigateway:us-east-1:dynamodb:action\/Query\";  \n                        integration.responses = {};   \n                        \n                        for (const [status, response] of Object.entries(method.responses)) {\n                            if(status == '200')\n                                {\n \n                                integration.responses.default = {}; \n                                integration.responses.default.statusCode = status;\n                                integration.responses.default.responseTemplates = {}; \n                                \n                                var detail_template = \"#set($inputRoot = $input.path('$'))\";\n                                detail_template = detail_template + \"\\n    #foreach($elem in $inputRoot.Items){\";\n\n                                schema_details = oas.components.schemas[resource_name];\n                                \n                                var detail_rows = \"\";\n                                for (const [name, property] of Object.entries(schema_details.properties)) {\n                                    detail_rows = detail_rows + '        \\\"' + name + '\\\": \\\"$elem.' + name + '.S\\\",';\n                                }\n                                detail_rows = detail_rows.substr(0,detail_rows.length-1);\n                                detail_template = detail_template + detail_rows;                                \n      \n                                detail_template = detail_template + \"    }#if($foreach.hasNext),#end\\n#end\";\n                                \n                                integration.responses.default.responseTemplates['application\/json'] = detail_template;\n                                }\n                            }\n                        \n                        integration.requestParameters = {};\n                        integration.requestParameters['integration.request.path.' + resource_slug + '_id'] = 'method.request.path.' + resource_slug + '_id';                        \n                        \n                        integration.passthroughBehavior = \"when_no_templates\";\n                        integration.httpMethod = \"POST\";\n                        integration.requestTemplates = {};\n                        integration.type = \"aws\";\n                        \n                        schema_details = oas.components.schemas[resource_name];\n                        \n                        var fields = \"\";\n                        for (const [name, property] of Object.entries(schema_details.properties)) {\n                            \/\/console.log(\"name: \" + name);\n                            fields = fields + name + ',';\n                        }\n                        fields = fields.substr(0,fields.length-1);                        \n                        \/\/console.log(\"fields: \" + fields);\n                        \n                        requestTemplates = '{\\n    \\\"TableName\\\": \\\"' + table_name + '\\\",\\n    \\\"ProjectionExpression\\\": \\\"' + fields + '\\\",\\n    \\\"KeyConditionExpression\\\": \\\"id = :v1\\\",\\n    \\\"ExpressionAttributeValues\\\": {\\n        \\\":v1\\\": {\\n            \\\"S\\\": \\\"$input.params(' + '\"' + resource_slug + '_id' + '\"' + ')\\\"\\n        }\\n    }\\n}';\n                      \n                        integration.requestTemplates['application\/json'] = requestTemplates;\n                        \n                        oas.paths[path][verb]['x-amazon-apigateway-integration'] = integration;\n                            \n                        }\n                    else\n                        {\n                            \n                        \/\/ listing    \n                        var integration = {};\n                        integration.credentials = \"arn:aws:iam::879370021840:role\/aws-api-gateway-lambda-2\";\n                        integration.uri = \"arn:aws:apigateway:us-east-1:dynamodb:action\/Scan\";  \n                        integration.responses = {};   \n                        \n                        for (const [status, response] of Object.entries(method.responses)) {\n                            if(status == '200')\n                                {\n \n                                integration.responses.default = {}; \n                                integration.responses.default.statusCode = status;\n                                integration.responses.default.responseTemplates = {}; \n                                \n                                schema_details = oas.components.schemas[resource_name];\n                                \n                                var properties = \"\";\n                                for (const [name, property] of Object.entries(schema_details.properties)) {\n                                    properties = properties + '\\n        \\\"' + name + '\\\": \\\"$elem.' + name + '.S\\\",';\n                                }\n                                properties = properties.substr(0,properties.length-1);\n                                \n                                \n                                responseTemplate = \"#set($inputRoot = $input.path('$'))\";\n                                responseTemplate = responseTemplate + \"\\n[\\n    #foreach($elem in $inputRoot.Items) {\";\n                                \n                                responseTemplate = responseTemplate + properties;\n      \n                                responseTemplate = responseTemplate + \"\\n    }#if($foreach.hasNext),#end\\n#end\";\n                                responseTemplate = responseTemplate + \"\\n]\";\n                                \n                                integration.responses.default.responseTemplates['application\/json'] = responseTemplate;\n                                }\n                            }\n                        \n                        integration.passthroughBehavior = \"when_no_templates\";\n                        integration.httpMethod = \"POST\";\n                        integration.requestTemplates = {};\n                        integration.type = \"aws\";\n                        \n                        requestTemplates = '{\\n    \\\"TableName\\\": \\\"' + table_name + '\\\",\\n    \\\"ReturnConsumedCapacity\\\": \\\"TOTAL\\\"\\n}';\n                      \n                        integration.requestTemplates['application\/json'] = requestTemplates;\n                        \n                        oas.paths[path][verb]['x-amazon-apigateway-integration'] = integration;\n                        \n                    }\n                }\n                \n                if(verb.toLowerCase() === 'post'){\n                \n                    \/\/ POST    \n                    integration = {};\n                    integration.credentials = aws_iam_role;\n                    integration.uri = \"arn:aws:apigateway:us-east-1:dynamodb:action\/PutItem\";  \n                    integration.responses = {};   \n                    \n                    for (const [status, response] of Object.entries(method.responses)) {\n                        if(status == '201')\n                            {\n                            \/\/console.log(response);\n                            integration.responses.default = {}; \n                            integration.responses.default.statusCode = status;\n                        \n                            integration.responses.default.responseTemplates = {}; \n                            integration.responses.default.responseTemplates['application\/json'] = \"{}\";                            \n                            \n                            }\n                        }\n                    \n                    integration.passthroughBehavior = \"when_no_templates\";\n                    integration.httpMethod = \"POST\";\n                    integration.requestTemplates = {};\n                    integration.type = \"aws\";\n                    \n                    post_request_template = '{\\n  \\\"TableName\\\": \\\"' + table_name + '\\\",\\n  \\\"Item\\\": {\\n';    \n                    \n                    post_schema_details = oas.components.schemas[resource_name];\n                    \n                    var post_rows = \"\";\n                    for (const [name, property] of Object.entries(post_schema_details.properties)) {\n                        if(name != 'id'){\n                            post_rows = post_rows + \"      #set($\" + name + \" = $input.json('\" + name + \"'))\\n\";\n                            post_rows = post_rows + \"      #if($\" + name + \".length() < 3) \\n\";      \n                            post_rows = post_rows + '            \\\"' + name + '\\\": {      \\\"S\\\": \"EMPTY\"    },\\n';\n                            post_rows = post_rows + '      #else\\n';                            \n                            post_rows = post_rows + '            \\\"' + name + '\\\": {      \\\"S\\\": $input.json(' + \"'\" + name + \"'\" + ')    },\\n';\n                            post_rows = post_rows + '      #end\\n';\n                        }\n                    }\n\n                    post_rows = post_rows + '\\\"id\\\": {\\n      \\\"S\\\": \\\"$context.requestId\\\"\\n    }\\n';\n\n                    post_request_template = post_request_template + post_rows;                    \n\n                    post_request_template = post_request_template + '\\n}}';\n                  \n                    integration.requestTemplates['application\/json'] = post_request_template;\n                    \n                    oas.paths[path][verb]['x-amazon-apigateway-integration'] = integration;\n\n                } \n                \n                if(verb.toLowerCase() === 'put'){\n                    \n                    \/\/ PUT\n                    integration = {};\n                    integration.credentials = aws_iam_role;\n                    integration.uri = \"arn:aws:apigateway:us-east-1:dynamodb:action\/UpdateItem\";  \n                    integration.responses = {};   \n                    \n                    for (const [status, response] of Object.entries(method.responses)) {\n                        if(status == '204')\n                            {\n                            \/\/console.log(response);\n                            integration.responses.default = {}; \n                            integration.responses.default.statusCode = status;\n                            integration.responses.default.responseTemplates = {};\n                            integration.responses.default.responseTemplates['application\/json'] = \"{}\";\n                            }\n                        }\n                    \n                    integration.requestParameters = {};\n                    integration.requestParameters['integration.request.path.' + resource_slug + '_id'] = 'method.request.path.' + resource_slug + '_id';\n                    \n                    integration.passthroughBehavior = \"when_no_templates\";\n                    integration.httpMethod = \"POST\";\n                    integration.requestTemplates = {};\n                    integration.type = \"aws\";\n                    \n                    schema_details = oas.components.schemas[resource_name];\n                    \n                    put_template = '{\\n';\n                    put_template = put_template + '  \"TableName\": \"asteroids\",\\n';\n                    put_template = put_template + '    \"Key\": {\\n';\n                    put_template = put_template + '        \"id\": {\\n';\n                    put_template = put_template + '            \"S\": \"$input.params(' + \"'\" + resource_slug + '_id' + \"'\" + ')\"\\n';\n                    put_template = put_template + '        }\\n';     \n                    put_template = put_template + '    },\\n';\n                    \n                    var put_rows = \"\";\n                    var count_property = 1;\n                    for (const [name, property] of Object.entries(schema_details.properties)) {   \n                        if(name != 'id'){\n                            put_rows = put_rows + name + ' = :val' + count_property + ',';\n                            count_property++;\n                        }\n                    }\n                    put_rows = put_rows.substr(0,put_rows.length-1);\n                    \n                    put_template = put_template + '\"UpdateExpression\": \"SET ' + put_rows + '\",\\n';\n                    \n                    put_template = put_template + '\"ExpressionAttributeValues\": {\\n';\n                    \n                    var put_rows = \"\";\n                    var count_property = 1;\n                    for (const [name, property] of Object.entries(schema_details.properties)) {                     \n                        if(name != 'id'){\n                            put_rows = put_rows + \"      #set($\" + name + \" = $input.json('\" + name + \"'))\\n\";\n                            put_rows = put_rows + \"      #if($\" + name + \".length() < 2) \\n\";      \n                            put_rows = put_rows + '            \":val' + count_property + '\": {\"S\": \"NULL\"},\\n';\n                            put_rows = put_rows + '      #else\\n';                            \n                            put_rows = put_rows + '            \":val' + count_property + '\": {\"S\": $input.json(' + \"'\" + name + \"'\" + ')},\\n';\n                            put_rows = put_rows + '      #end\\n';\n                            count_property++;\n                        }\n                    }\n                    put_rows = put_rows.substr(0,put_rows.length-13);\n                    put_template = put_template + put_rows + '\\n      #end\\n'; \n                    put_template = put_template + '\\n    },\\n    \\\"ReturnValues\\\": \\\"ALL_NEW\\\"\\n}';\n\n                    \/\/put_template = put_template + '}';\n                  \n                    integration.requestTemplates['application\/json'] = put_template;\n                    \n                    oas.paths[path][verb]['x-amazon-apigateway-integration'] = integration;                    \n                    \n            \n                }   \n                \n                if(verb.toLowerCase() === 'delete'){\n                    \n                    var integration = {};\n                    integration.credentials = aws_iam_role;\n                    integration.uri = \"arn:aws:apigateway:us-east-1:dynamodb:action\/DeleteItem\";  \n                    integration.responses = {};   \n                    \n                    for (const [status, response] of Object.entries(method.responses)) {\n                        if(status == '202')\n                            {\n                            integration.responses.default = {}; \n                            integration.responses.default.statusCode = status;\n                            integration.responses.default.responseTemplates = {};\n                            integration.responses.default.responseTemplates['application\/json'] = \"{}\";\n                            }\n                        }\n                    \n                    integration.passthroughBehavior = \"when_no_templates\";\n                    integration.httpMethod = \"POST\";\n                    integration.requestTemplates = {};\n                    integration.type = \"aws\";\n   \n                    requestTemplates = '{\\n';\n                    requestTemplates = requestTemplates + '    \"TableName\": \"' + table_name + '\",\\n';\n                    requestTemplates = requestTemplates + '    \"Key\": {\\n';\n                    requestTemplates = requestTemplates + '        \"id\": {\\n';\n                    requestTemplates = requestTemplates + '            \"S\": \"$input.params(' + \"'\" + resource_slug + '_id' + \"'\" + ')\\\"\\n';\n                    requestTemplates = requestTemplates + '        }\\n';\n                    requestTemplates = requestTemplates + '    },\\n';\n                    requestTemplates = requestTemplates + '    \"ConditionExpression\": \"attribute_not_exists(Replies)\",\\n';\n                    requestTemplates = requestTemplates + '    \"ReturnValues\": \"ALL_OLD\"\\n';\n                    requestTemplates = requestTemplates + '}\\n';\n                  \n                    integration.requestTemplates['application\/json'] = requestTemplates;\n                    \n                    oas.paths[path][verb]['x-amazon-apigateway-integration'] = integration;                    \n                \n                    }                                                 \n                \n                }                                          \n            \n            }\n            \n        \/\/console.log(JSON.stringify(oas));   \n        \n        pm.environment.set(\"openapi_build\", JSON.stringify(oas));\n        \n        }\n    \n    }\n});                                \n","currentHelper":null,"helperAttributes":null,"collectionId":"e81e0e06-6dde-4f84-a13a-077706847aa6","headers":"x-api-key: {{postman_api_key}}\nContent-Type: application\/json\n","pathVariables":[]},{"id":"f8d22fb8-4487-49ce-913c-057f309e04f4","name":"7. API Key (AWS API Gateway)","url":"{{aws_api_gateway_base_url}}\/apikeys\/","description":"Adds a key, and sets the envioronment with the id. Establishing a single unique key for accessing the API(s) being deployed.","data":[],"dataOptions":null,"dataMode":"raw","headerData":[],"method":"POST","pathVariableData":[],"queryParams":[],"auth":{"awsv4":[{"key":"service","type":"string","value":"{{aws_api_gateway_control_plane_service}}"},{"key":"secretKey","type":"string","value":"{{secretKey}}"},{"key":"accessKey","type":"string","value":"{{accessKey}}"},{"key":"region","type":"string","value":"{{aws_api_gateway_control_plane_region}}"}],"type":"awsv4"},"events":[{"listen":"test","script":{"id":"0e2f6e54-7204-4191-ae7a-eaba6410352f","exec":["const jsonData = pm.response.json();","var key_id = jsonData.id;","pm.environment.set(\"aws_api_gateway_key\", key_id);"],"type":"text\/javascript"}}],"folder":null,"preRequestScript":null,"tests":"const jsonData = pm.response.json();\nvar key_id = jsonData.id;\npm.environment.set(\"aws_api_gateway_key\", key_id);","currentHelper":"awsSigV4","helperAttributes":{"service":"{{aws_api_gateway_control_plane_service}}","secretKey":"{{secretKey}}","accessKey":"{{accessKey}}","region":"{{aws_api_gateway_control_plane_region}}"},"collectionId":"e81e0e06-6dde-4f84-a13a-077706847aa6","rawModeData":"{\n  \"name\" : \"Mission Control\",\n  \"description\" : \"This is a description of my key\",\n  \"enabled\" : \"true\"\n}","headers":"","pathVariables":[]},{"id":"ff23f096-664c-4882-948c-fbdbd3ea79f6","name":"8. Add Key To Usage Plan (AWS API Gateway)","url":"{{aws_api_gateway_base_url}}\/usageplans\/:usage_plan_id\/keys","description":"Now that we have a key and a usage plan we actually have to associate them so that they know about each other.","data":[],"dataOptions":null,"dataMode":"raw","headerData":[],"method":"POST","pathVariableData":[{"key":"usage_plan_id","value":"{{aws_api_gateway_usage_plan_id}}"}],"queryParams":[],"auth":{"type":"awsv4","awsv4":[{"key":"service","value":"{{aws_api_gateway_control_plane_service}}","type":"string"},{"key":"secretKey","value":"{{secretKey}}","type":"string"},{"key":"accessKey","value":"{{accessKey}}","type":"string"},{"key":"region","value":"{{aws_api_gateway_control_plane_region}}","type":"string"}]},"events":null,"folder":null,"currentHelper":"awsSigV4","helperAttributes":{"service":"{{aws_api_gateway_control_plane_service}}","secretKey":"{{secretKey}}","accessKey":"{{accessKey}}","region":"{{aws_api_gateway_control_plane_region}}"},"collectionId":"e81e0e06-6dde-4f84-a13a-077706847aa6","rawModeData":"{\n  \"keyId\" : \"{{aws_api_gateway_key}}\",\n  \"keyType\" : \"API_KEY\"\n}","headers":"","pathVariables":{"usage_plan_id":"{{aws_api_gateway_usage_plan_id}}"}}]}